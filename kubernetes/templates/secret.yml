#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels", "credentials")

#@ if len(data.values.backman.username) == 0 or data.values.backman.username == "username":
#@  assert.fail("backman.username is missing or invalid")
#@ end
#@ if len(data.values.backman.password) == 0 or data.values.backman.password == "password":
#@  assert.fail("backman.password is missing or invalid")
#@ end
#@ if len(data.values.backman.storage.s3.host) == 0 or data.values.backman.storage.s3.host == "host":
#@  assert.fail("backman.storage.s3.host is missing or invalid")
#@ end
#@ if len(data.values.backman.storage.s3.key) == 0 or data.values.backman.storage.s3.key == "access_key":
#@  assert.fail("backman.storage.s3.key is missing or invalid")
#@ end
#@ if len(data.values.backman.storage.s3.secret) == 0 or data.values.backman.storage.s3.secret == "secret_key":
#@  assert.fail("backman.storage.s3.secret is missing or invalid")
#@ end
#@ if len(data.values.backman.services) == 0:
#@  assert.fail("backman.services are missing or invalid")
#@ end
#@ for idx in range(len(data.values.backman.services)):
#@   service = data.values.backman.services[idx]
#@   if len(service.name) == 0:
#@     assert.fail("backman.services[" + str(idx) + "].name is missing")
#@   end
#@   if len(service.type) == 0:
#@     assert.fail("backman.services[" + str(idx) + "].type is missing")
#@   end
#@   if len(service.schedule) == 0:
#@     assert.fail("backman.services[" + str(idx) + "].schedule is missing")
#@   end
#@   if len(service.timeout) == 0:
#@     assert.fail("backman.services[" + str(idx) + "].timeout is missing")
#@   end
#@   if service.retention.days <= 0:
#@     assert.fail("backman.services[" + str(idx) + "].retention.days is missing")
#@   end
#@   if service.retention.files <= 0:
#@     assert.fail("backman.services[" + str(idx) + "].retention.files is missing")
#@   end
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: backman
  namespace: backman
  labels: #@ labels("secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
#@yaml/text-templated-strings
stringData:
  BACKMAN_USERNAME: #@ data.values.backman.username
  BACKMAN_PASSWORD: #@ data.values.backman.password
  PROBE_AUTHORIZATION: #@ 'Basic ' + base64.encode(data.values.backman.username + ':' + data.values.backman.password)
  BACKMAN_CONFIG: |
    {
      "log_level": "debug",
      "logging_timestamp": true,
      "unprotected_metrics": true,
      "s3": {
        "service_label": "user-provided",
        "service_name": "backman-storage",
        "bucket_name": "backman-storage"
      },
      "services": {
        (@- for idx in range(len(data.values.backman.services)): -@)
        (@- service = data.values.backman.services[idx] -@)
        (@- if idx > 0: -@),
        (@- end @)
        "(@= service.name @)": {
          "schedule": "(@= service.schedule @)",
          "timeout": "(@= service.timeout @)",
          "retention": {
            "days": (@= str(service.retention.days) @),
            "files": (@= str(service.retention.files) @)
          }
        }
        (@- end @)
      }
    }
  VCAP_APPLICATION: |
    {
      "application_id": "backman",
      "application_name": "backman",
      "application_uris": [
        "backman.backman.pod.cluster.local"
      ],
      "application_version": "(@= data.values.backman.image @)",
      "name": "backman",
      "organization_name": "backman",
      "space_name": "backman",
      "uris": [
        "backman.backman.pod.cluster.local"
      ],
      "version": "(@= data.values.backman.image @)"
    }
  VCAP_SERVICES: |
    {
      "user-provided": [{
        "credentials": {
            "region": "(@= data.values.backman.storage.s3.region @)",
            "accessHost": "(@= data.values.backman.storage.s3.host @)",
            "accessKey": "(@= data.values.backman.storage.s3.key @)",
            "sharedSecret": "(@= data.values.backman.storage.s3.secret @)"
        },
        "label": "user-provided",
        "name": "backman-storage"
      }
      (@- for service in data.values.backman.services: -@)
      , {
        (@= str(credentials(service)) @)
        "label": "(@= service.type @)",
        "tags": [ "(@= service.type @)" ],
        "name": "(@= service.name @)"
      }
      (@- end -@)
      ]
    }
