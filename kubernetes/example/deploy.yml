---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kbld.k14s.io/images: |
      - Metas:
        - Type: preresolved
          URL: index.docker.io/jamesclonk/backman@sha256:78501678eb0dc2169cbb3ff3fcb0ec6757c557f7c549d9fb365dbdcb06a0ad5d
        URL: index.docker.io/jamesclonk/backman@sha256:78501678eb0dc2169cbb3ff3fcb0ec6757c557f7c549d9fb365dbdcb06a0ad5d
  labels:
    app: backman
    app.kubernetes.io/component: gui
    app.kubernetes.io/instance: backman
    app.kubernetes.io/name: backman
  name: backman
  namespace: backman
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: backman
      app.kubernetes.io/component: gui
      app.kubernetes.io/instance: backman
      app.kubernetes.io/name: backman
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: backman
        app.kubernetes.io/component: gui
        app.kubernetes.io/instance: backman
        app.kubernetes.io/name: backman
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - backman
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - backman
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - backman
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - gui
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - env:
        - name: PORT
          value: "8080"
        - name: TZ
          value: Europe/Zurich
        envFrom:
        - secretRef:
            name: backman
        image: index.docker.io/jamesclonk/backman@sha256:78501678eb0dc2169cbb3ff3fcb0ec6757c557f7c549d9fb365dbdcb06a0ad5d
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - 'curl --fail http://localhost:8080/api/v1/states --header "Authorization: ${PROBE_AUTHORIZATION}"'
          failureThreshold: 5
          initialDelaySeconds: 15
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
        name: backman
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /metrics
            port: 8080
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 250m
            memory: 1Gi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
      securityContext:
        fsGroup: 2000
        runAsGroup: 2000
        runAsUser: 2000
      serviceAccountName: backman
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  labels:
    app: backman
    app.kubernetes.io/component: ingress
    app.kubernetes.io/instance: backman
    app.kubernetes.io/name: backman
  name: backman
  namespace: backman
spec:
  rules:
  - host: backman.swisscom.com
    http:
      paths:
      - backend:
          serviceName: backman
          servicePort: 8080
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app: backman
    app.kubernetes.io/component: namespace
    app.kubernetes.io/instance: backman
    app.kubernetes.io/name: backman
    namespace.kubernetes.io/name: backman
  name: backman
  namespace: backman
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app: backman
    app.kubernetes.io/component: netpol
    app.kubernetes.io/instance: backman
    app.kubernetes.io/name: backman
  name: backman
  namespace: backman
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace.kubernetes.io/name: prometheus
      podSelector: {}
    ports:
    - port: 8080
  - from:
    - namespaceSelector:
        matchLabels:
          namespace.kubernetes.io/name: ingress-nginx
      podSelector: {}
    ports:
    - port: 8080
  podSelector:
    matchLabels:
      app: backman
      app.kubernetes.io/component: gui
      app.kubernetes.io/instance: backman
      app.kubernetes.io/name: backman
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: backman
    app.kubernetes.io/component: role
    app.kubernetes.io/instance: backman
    app.kubernetes.io/name: backman
  name: backman
  namespace: backman
rules:
- apiGroups:
  - policy
  resourceNames:
  - backman
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: backman
    app.kubernetes.io/component: role-binding
    app.kubernetes.io/instance: backman
    app.kubernetes.io/name: backman
  name: backman
  namespace: backman
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: backman
subjects:
- kind: ServiceAccount
  name: backman
  namespace: backman
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
  labels:
    app: backman
    app.kubernetes.io/component: psp
    app.kubernetes.io/instance: backman
    app.kubernetes.io/name: backman
  name: backman
  namespace: backman
spec:
  allowPrivilegeEscalation: false
  fsGroup:
    ranges:
    - max: 65535
      min: 2000
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  privileged: false
  readOnlyRootFilesystem: false
  requiredDropCapabilities:
  - ALL
  runAsUser:
    ranges:
    - max: 65535
      min: 2000
    rule: MustRunAs
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
    - max: 65535
      min: 2000
    rule: MustRunAs
  volumes: []
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    kapp.k14s.io/versioned: ""
  labels:
    app: backman
    app.kubernetes.io/component: secret
    app.kubernetes.io/instance: backman
    app.kubernetes.io/name: backman
  name: backman
  namespace: backman
stringData:
  BACKMAN_CONFIG: |
    {
      "log_level": "debug",
      "logging_timestamp": true,
      "unprotected_metrics": true,
      "s3": {
        "service_label": "user-provided",
        "service_name": "backman-storage",
        "bucket_name": "backman-storage"
      },
      "services": {
        "my-postgres": {
          "schedule": "0 0 2,18 * * *",
          "timeout": "2h",
          "retention": {
            "days": 21,
            "files": 111
          }
        },
        "my-mysql": {
          "schedule": "1 2 3 4 5 *",
          "timeout": "2h",
          "retention": {
            "days": 33,
            "files": 33
          }
        },
        "my-mongodb": {
          "schedule": "0 0 3 * * *",
          "timeout": "2h",
          "retention": {
            "days": 90,
            "files": 100
          }
        },
        "my-redis": {
          "schedule": "0 0 4 * * *",
          "timeout": "1h",
          "retention": {
            "days": 365,
            "files": 500
          }
        },
        "my-elasticsearch": {
          "schedule": "0 0 0 4,6 * *",
          "timeout": "6h",
          "retention": {
            "days": 2,
            "files": 5
          }
        }
      }
    }
  BACKMAN_PASSWORD: doe
  BACKMAN_USERNAME: john
  PROBE_AUTHORIZATION: Basic am9objpkb2U=
  VCAP_APPLICATION: |
    {
      "application_id": "backman",
      "application_name": "backman",
      "application_uris": [
        "backman.backman.pod.cluster.local"
      ],
      "application_version": "jamesclonk/backman:1.23.1",
      "name": "backman",
      "organization_name": "backman",
      "space_name": "backman",
      "uris": [
        "backman.backman.pod.cluster.local"
      ],
      "version": "jamesclonk/backman:1.23.1"
    }
  VCAP_SERVICES: |
    {
      "user-provided": [{
        "credentials": {
            "region": "",
            "accessHost": "s3.amazonaws.com",
            "accessKey": "access-key",
            "sharedSecret": "secret-key"
        },
        "label": "user-provided",
        "name": "backman-storage"
      }, {
        "credentials": {
            "uri": "postgres://postgres_user:postgres_passwd@postgres.domain:5432/postgres_db?sslmode=disable",
            "database_uri": "postgres://postgres_user:postgres_passwd@postgres.domain:5432/postgres_db?sslmode=disable",
            "jdbcUrl": "postgres://postgres_user:postgres_passwd@postgres.domain:5432/postgres_db?sslmode=disable",
            "name": "my-postgres",
            "host": "postgres.domain:5432",
            "hostname": "postgres.domain",
            "port": 5432,
            "database": "postgres_db",
            "username": "postgres_user",
            "password": "postgres_passwd"
        },
        "label": "postgres",
        "tags": [ "postgres" ],
        "name": "my-postgres"
      }, {
        "credentials": {
            "uri": "mysql://mysql_user:mysql_passwd@mysql.domain:3306/mysql_db",
            "database_uri": "mysql://mysql_user:mysql_passwd@mysql.domain:3306/mysql_db",
            "jdbcUrl": "mysql://mysql_user:mysql_passwd@mysql.domain:3306/mysql_db",
            "name": "my-mysql",
            "host": "mysql.domain:3306",
            "hostname": "mysql.domain",
            "port": 3306,
            "database": "mysql_db",
            "username": "mysql_user",
            "password": "mysql_passwd"
        },
        "label": "mysql",
        "tags": [ "mysql" ],
        "name": "my-mysql"
      }, {
        "credentials": {
            "uri": "mongodb://mongodbadmin:super-secret@127.0.0.1:27017"
        },
        "label": "mongodb",
        "tags": [ "mongodb" ],
        "name": "my-mongodb"
      }, {
        "credentials": {
            "host": "redis.domain:6379",
            "hostname": "redis.domain",
            "port": 6379,
            "password": "redis_passwd"
        },
        "label": "redis",
        "tags": [ "redis" ],
        "name": "my-redis"
      }, {
        "credentials": {
            "host": "https://my.elasticsearch.swisscom.com",
            "full_access_username": "elasticsearch_user",
            "full_access_password": "elasticsearch_passwd"
        },
        "label": "elasticsearch",
        "tags": [ "elasticsearch" ],
        "name": "my-elasticsearch"
      }]
    }
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: backman
    app.kubernetes.io/component: svc
    app.kubernetes.io/instance: backman
    app.kubernetes.io/name: backman
  name: backman
  namespace: backman
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: backman
    app.kubernetes.io/component: gui
    app.kubernetes.io/instance: backman
    app.kubernetes.io/name: backman
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: backman
    app.kubernetes.io/component: sa
    app.kubernetes.io/instance: backman
    app.kubernetes.io/name: backman
  name: backman
  namespace: backman
